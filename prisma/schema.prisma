// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  userId String @unique
  profilePic String
  posts Post[]
  likes Likes[]
  reposts RePosts[]
  comments Comment[]
  friends1 Friends[] @relation("Friends1")
  friends2 Friends[] @relation("Friends2")
}

model Post {
  id Int @id @default(autoincrement())
  postContent String
  userId String
  username String
  likes Likes[]
  reposts RePosts[]
  picture String?
  createdAt DateTime @default(now())

  comments Comment[]
  user User @relation(fields: [userId], references: [userId])
}

model Comment {
  id Int @id @default(autoincrement())
  commentContent String
  postId Int
  userId String

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [userId])
}

model Likes {
  postId Int
  userId String

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [userId])

  @@id([postId, userId])
}

model RePosts {
  postId Int
  userId String
  repostId Int

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [userId])

  @@id([postId, userId])
}

model Friends {
  id Int @id @default(autoincrement())

  userId1 String
  user1 User @relation("Friends1" ,fields: [userId1], references: [userId])

  userId2 String
  user2 User @relation("Friends2", fields: [userId2], references: [userId])

  @@unique([userId1, userId2])
  @@index([userId1])
  @@index([userId2])
}